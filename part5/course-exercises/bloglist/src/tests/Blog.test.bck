import React from "react";
import "@testing-library/jest-dom/extend-expect";
import { render, screen } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import Blog from "../components/Blog";

describe("<Blog />", () => {
  let container;
  const handleLikeBlog = jest.fn();

  beforeEach(() => {
    const blog = {
      title: "Some title",
      author: "author name",
      url: "some url",
      likes: 4,
      user: "user name",
    };

    container = render(
      <Blog blog={blog} handleLikeBlog={handleLikeBlog} />
    ).container;
  });

  test("")

  test("shows blog url and number of likes when toggling view button", async () => {
    const user = userEvent.setup();
    const button = screen.getByText("view");
    const divBefore = container.querySelector(".blog-url").parentElement;
    expect(divBefore).toHaveStyle("display: none");
    await user.click(button);

    const divAfter = container.querySelector(".blog-url").parentElement;
    expect(divAfter).not.toHaveStyle("display: none");

    const blogUrl = container.querySelector(".blog-url");
    expect(blogUrl).toHaveTextContent("some url");

    const blogLikes = container.querySelector(".blog-likes");
    expect(blogLikes).toHaveTextContent("likes 4 like");
  });

  test("shows two calls for event handler, handleLikeBlog, when like is clicked twice", async () => {
    const user = userEvent.setup();
    const button = screen.getByText("view");
    await user.click(button);

    const likeButton = container.querySelector(".like-btn");
    await user.click(likeButton);
    await user.click(likeButton);

    expect(handleLikeBlog.mock.calls).toHaveLength(2);
  });
});
